// Import th∆∞ vi·ªán UIKit ƒë·ªÉ s·ª≠ d·ª•ng c√°c th√†nh ph·∫ßn UI c·ªßa iOS
#import <UIKit/UIKit.h>
#import "SCLAlertView/SCLAlertView.h"
#import "FPSDisplay.h"

// ƒê·ªãnh nghƒ©a chi·ªÅu r·ªông m√†n h√¨nh
#define SCREEN_WIDTH [UIScreen mainScreen].bounds.size.width

// Interface FPSDisplay
@interface FPSDisplay ()

// C√°c thu·ªôc t√≠nh c·ªßa FPSDisplay
@property (strong, nonatomic) UILabel *displayLabel;
@property (strong, nonatomic) CADisplayLink *link;
@property (assign, nonatomic) NSInteger count;
@property (assign, nonatomic) NSTimeInterval lastTime;
@property (strong, nonatomic) UIFont *font;
@property (strong, nonatomic) UIFont *subFont;

@end

@implementation FPSDisplay

// Load method ƒë∆∞·ª£c g·ªçi khi class ƒë∆∞·ª£c load v√†o b·ªô nh·ªõ
+ (void)load {
    // G·ªçi h√†m shareFPSDisplay sau 20 gi√¢y khi class ƒë∆∞·ª£c load
    dispatch_after(dispatch_time(DISPATCH_TIME_NOW, (int64_t)(20 * NSEC_PER_SEC)), dispatch_get_main_queue(), ^{
        [self shareFPSDisplay];
    });
}

// Ph∆∞∆°ng th·ª©c shareFPSDisplay ƒë·ªÉ tr·∫£ v·ªÅ instance duy nh·∫•t c·ªßa FPSDisplay
+ (instancetype)shareFPSDisplay {
    static FPSDisplay *shareDisplay;
    static dispatch_once_t onceToken;
    dispatch_once(&onceToken, ^{
        shareDisplay = [[FPSDisplay alloc] init];
    });
    return shareDisplay;
}

// Ph∆∞∆°ng th·ª©c kh·ªüi t·∫°o c·ªßa FPSDisplay
- (instancetype)init {
    self = [super init];
    if (self) {
        [self initDisplayLabel];
    }
    return self;
}

// Ph∆∞∆°ng th·ª©c kh·ªüi t·∫°o Label hi·ªÉn th·ªã FPS
- (void)initDisplayLabel {
    CGRect frame = CGRectMake(SCREEN_WIDTH - 300, 0.5, 350, 30);
    self.displayLabel = [[UILabel alloc] initWithFrame: frame];
    self.displayLabel.layer.cornerRadius = 15;
    self.displayLabel.clipsToBounds = YES;
    self.displayLabel.textAlignment = NSTextAlignmentLeft;
    self.displayLabel.userInteractionEnabled = NO;

    _font = [UIFont fontWithName:@"Menlo" size:14];
    if (_font) {
        _subFont = [UIFont fontWithName:@"Menlo" size:4];
    } else {
        _font = [UIFont fontWithName:@"Courier" size:14];
        _subFont = [UIFont fontWithName:@"Courier" size:4];
    }

    [self initCADisplayLink];

    [[UIApplication sharedApplication].keyWindow addSubview:self.displayLabel];
    [self changeLabelColorContinuously];
}

// Ph∆∞∆°ng th·ª©c thay ƒë·ªïi m√†u s·∫Øc li√™n t·ª•c c·ªßa Label
- (void)changeLabelColorContinuously {
    // M·∫£ng c√°c m√†u ƒë·ªÉ thay ƒë·ªïi
    NSArray *colors = @[
        // ... (Danh s√°ch 20 m√†u s·∫Ω thay ƒë·ªïi)
    ];
    
    // Bi·∫øn l∆∞u ch·ªâ s·ªë m√†u s·∫Øc hi·ªán t·∫°i
    __block NSInteger colorIndex = 0;

    // Timer ƒë·ªÉ thay ƒë·ªïi m√†u s·∫Øc sau m·ªói gi√¢y
    [NSTimer scheduledTimerWithTimeInterval:1.0 repeats:YES block:^(NSTimer * _Nonnull timer) {
        self.displayLabel.textColor = colors[colorIndex];
        colorIndex = (colorIndex + 1) % colors.count;
    }];
}

// Ph∆∞∆°ng th·ª©c kh·ªüi t·∫°o CADisplayLink ƒë·ªÉ t√≠nh FPS
- (void)initCADisplayLink {
    self.link = [CADisplayLink displayLinkWithTarget:self selector:@selector(tick:)];
    [self.link addToRunLoop:[NSRunLoop mainRunLoop] forMode:NSRunLoopCommonModes];
}

// Ph∆∞∆°ng th·ª©c tick ƒë·ªÉ t√≠nh FPS
- (void)tick:(CADisplayLink *)link {
    // X√°c ƒë·ªãnh FPS sau m·ªói gi√¢y
    if (self.lastTime == 0) {
        self.lastTime = link.timestamp;
        return;
    }
    self.count += 1;
    NSTimeInterval delta = link.timestamp - _lastTime;
    if (delta >= 1.f) {
        self.lastTime = link.timestamp;
        float fps = self.count / delta;
        self.count = 0;
        [self updateDisplayLabelText: fps];
    }
}

// Ph∆∞∆°ng th·ª©c c·∫≠p nh·∫≠t n·ªôi dung c·ªßa Label hi·ªÉn th·ªã FPS
- (void)updateDisplayLabelText: (float) fps {
    // Kh·ªüi t·∫°o m·ªôt NSMutableString ƒë·ªÉ ch·ª©a th√¥ng tin th·ªùi gian hi·ªán t·∫°i
    NSMutableString *mustr = [[NSMutableString alloc] init];
    // G√°n th√¥ng tin th·ªùi gian hi·ªán t·∫°i v√†o chu·ªói NSMutableString v·ª´a kh·ªüi t·∫°o
    [mustr appendFormat:@"%@", self.getSystemDate];
    // G√°n n·ªôi dung cho Label hi·ªÉn th·ªã FPS k·∫øt h·ª£p v·ªõi th√¥ng tin th·ªùi gian v√† m·ªôt chu·ªói b·ªï sung "byTrungHieu"
    self.displayLabel.text = [NSString stringWithFormat:@"%dFPS %@byTrungHieuüáªüá≥", (int)round(fps), mustr];
    // Thi·∫øt l·∫≠p m√†u s·∫Øc c·ªßa Label hi·ªÉn th·ªã FPS th√†nh m·ªôt m√†u c·ª• th·ªÉ (m√†u h·ªìng)
    self.displayLabel.textColor = [UIColor colorWithRed: 1.00 green: 0.58 blue: 0.78 alpha: 1.00];
    // Thi·∫øt l·∫≠p font ch·ªØ cho Label hi·ªÉn th·ªã FPS v·ªõi k√≠ch c·ª° font l√† 11
    self.displayLabel.font = [UIFont systemFontOfSize:11];
}

// Ph∆∞∆°ng th·ª©c l·∫•y th·ªùi gian hi·ªán t·∫°i
- (NSString *)getSystemDate {
    // L·∫•y th·ªùi gian hi·ªán t·∫°i
    NSDate *currentDate = [NSDate date];
    // Kh·ªüi t·∫°o m·ªôt ƒë·ªëi t∆∞·ª£ng NSDateFormatter ƒë·ªÉ ƒë·ªãnh d·∫°ng th·ªùi gian
    NSDateFormatter *dateFormatter = [[NSDateFormatter alloc] init];
    // ƒê·∫∑t ƒë·ªãnh d·∫°ng cho ƒë·ªëi t∆∞·ª£ng NSDateFormatter l√† "yyyy-MM-dd-HH:mm:ss"
    [dateFormatter setDateFormat:@" yyyy-MM-dd-HH:mm:ss "];
    // Tr·∫£ v·ªÅ chu·ªói ƒë·∫°i di·ªán cho th·ªùi gian hi·ªán t·∫°i theo ƒë·ªãnh d·∫°ng ƒë√£ thi·∫øt l·∫≠p
    return [dateFormatter stringFromDate:currentDate];
}

@end
